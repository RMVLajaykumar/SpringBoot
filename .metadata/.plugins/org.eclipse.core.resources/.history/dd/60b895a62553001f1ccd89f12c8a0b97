package com.monocept.app.controller;

import java.util.List;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.monocept.app.entity.Course;
import com.monocept.app.entity.Student;
import com.monocept.app.service.StudentCourseService;

import jakarta.validation.Valid;

@RestController
@RequestMapping("/api")
public class StudentCourseController {
	
	private StudentCourseService studentCourseService;
	
	
	
	public StudentCourseController(StudentCourseService studentCourseService) {
		super();
		this.studentCourseService = studentCourseService;
	}



	@PostMapping("students")
	public Student addStudent(@Valid @RequestBody Student student){
		return studentCourseService.addStudent(student);
		
	}
	
	@GetMapping("students")
	public List<Student> getAllStudents() {
		return studentCourseService.getStudents();
	}
	
	
	@GetMapping("students/{id}")
	public Student getStudentById(@PathVariable(name="id")long id) {
		return studentCourseService.getStudentById(id);
	}
	
	
	@DeleteMapping("students/{id}")
	public Student deleteStudentById(@PathVariable(name="id")long id) {
		return studentCourseService.deleteStudentById(id);
		
	}
	
	@PostMapping("courses")
	public Course addCourse(@Valid @RequestBody Course course ){
		return studentCourseService.addCourse(course);
		
	}
	@GetMapping("courses")
	public List<Course> getAllCourses() {
		return studentCourseService.getCourses();
	}
	@GetMapping("courses/{id}")
	public Course getCourseById(@PathVariable(name="id")long id) {
		return studentCourseService.geCourseById(id);
	}
	
	@DeleteMapping("courses/{id}")
	public void deleteCourseById(@PathVariable(name="id")long id) {
		studentCourseService.deleteCourseById(id);
	}
	@PostMapping("students/{studentId}/courses/{courseId}")
    public Student addCourseToStudent(@PathVariable(name = "studentId") long studentId, @PathVariable(name = "courseId") long courseId) {
        return studentCourseService.addCourseToStudent(studentId, courseId);
	}
}
