package com.monocept.app.service;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.monocept.app.dto.AccountRequestDto;
import com.monocept.app.dto.AccountResponseDto;
import com.monocept.app.dto.BankRequestDto;
import com.monocept.app.dto.CustomerRequestDto;
import com.monocept.app.dto.CustomerResponseDto;
import com.monocept.app.dto.ProfileRequestDto;
import com.monocept.app.dto.TransactionResponseDto;
import com.monocept.app.dto.UserRequestDto;
import com.monocept.app.dto.UserResponseDto;
import com.monocept.app.entity.Account;
import com.monocept.app.entity.Bank;
import com.monocept.app.entity.Customer;
import com.monocept.app.entity.Transaction;
import com.monocept.app.entity.TransactionType;
import com.monocept.app.entity.User;
import com.monocept.app.exception.CustomerNotFoundException;
import com.monocept.app.exception.NoRecordFoundException;
import com.monocept.app.repository.AccountRepository;
import com.monocept.app.repository.BankRepository;
import com.monocept.app.repository.CustomerRepository;
import com.monocept.app.repository.TransactionRepository;
import com.monocept.app.repository.UserRepository;
import com.monocept.app.util.PagedResponse;

@Service
public class BankServiceImpl implements BankService{
	CustomerRepository customerRepository;
	
	AccountRepository accountRepository;
	BankRepository bankRepository;
	TransactionRepository transactionRepository;
	UserRepository userRepository;
	 PasswordEncoder passwordEncoder;

	


	 @Autowired
		private JavaMailSender javaMailSender;
		
		
		@Value("$(spring.mail.username)")
		private String fromMail ;
		

	


	public BankServiceImpl(CustomerRepository customerRepository, AccountRepository accountRepository,
			BankRepository bankRepository, TransactionRepository transactionRepository, UserRepository userRepository,
			PasswordEncoder passwordEncoder) {
		super();
		this.customerRepository = customerRepository;
		this.accountRepository = accountRepository;
		this.bankRepository = bankRepository;
		this.transactionRepository = transactionRepository;
		this.userRepository = userRepository;
		this.passwordEncoder = passwordEncoder;
	}


	@Override
	public PagedResponse<CustomerResponseDto> getAllCustomers(int page, int size, String sortBy, String direction) {
		Sort sort = Sort.by(sortBy);
        if (direction.equalsIgnoreCase(Sort.Direction.DESC.name())) {
            sort = sort.descending();
        } else {
            sort = sort.ascending();
        }
        Pageable pageable = PageRequest.of(page, size, sort);
        Page<Customer> customerPage = customerRepository.findAll(pageable);
        
        
		  List<CustomerResponseDto> customerDto = convertCustomertoCustomerDto(customerPage.getContent());
		  return new PagedResponse<>(customerDto, customerPage.getNumber(), customerPage.getSize(),
				  customerPage.getTotalElements(), customerPage.getTotalPages(), customerPage.isLast());
	}


	private List<CustomerResponseDto> convertCustomertoCustomerDto(List<Customer> all) {
		List<CustomerResponseDto> customers=new ArrayList<>();
		
		for(Customer i:all) {
			CustomerResponseDto customer=new CustomerResponseDto();
			customer.setCustomer_id(i.getCustomer_id());
			customer.setFirstName(i.getFirstName());
			customer.setLastName(i.getLastName());
			customer.setTotalBalance(i.getTotalBalance());		
			customer.setAccounts(convertAccounttoAccountResponseDto(i.getAccounts()));
			customers.add(customer);
		}
		return customers;
	}

  

	private List<AccountResponseDto> convertAccounttoAccountResponseDto(List<Account> accounts) {
	
	
		List<AccountResponseDto> accountResponseDto=new ArrayList<>();
		for(Account account:accounts) {
			
			accountResponseDto.add(	convertAccounttoAccountResponseDto(account));
			
		}
		return accountResponseDto;
	}


	private AccountResponseDto convertAccounttoAccountResponseDto(Account account) {
		
		AccountResponseDto accountResponseDto= new AccountResponseDto();
		accountResponseDto.setAccountNumber(account.getAccountNumber());
		accountResponseDto.setBalance(account.getBalance());
		return accountResponseDto;
	}





//	@Override
//	public String deleteCustomerById(long id) {
//		
//		
//		Customer customer=customerRepository.findById(id).orElse(null);
//		if(customer!=null) {
//			customerRepository.deleteById(id);
//			
//		}
//		else {
//			throw new CustomerNotFoundException("customer not found with id: "+id);
//		}
//		return "customer deleted Successfully";
//		
//	}


	@Override
	public CustomerResponseDto findCustomerByid(long id) {
		Customer customer = customerRepository.findById(id).orElse(null);
		if(customer==null) {
			throw new CustomerNotFoundException("customer not found with id: "+id);
		}
		else {
		return convertCustomerToCustomerResponseDto(customer);
		}
	}


	@Override
	public CustomerResponseDto addAccount(long cid,int bid) {
		
		 Account account = new Account();
		 Bank bank = bankRepository.findById(bid).orElse(null);
		
		 
		 if(bank != null) {
			 Customer customer = customerRepository.findById(cid).orElse(null);
			 
			 if(customer != null){
				 
				
				 account.setBalance(1000);
				 account.setBank(bank);
				 account.setCustomer(customer);
				 
				 customer.addbankAccount(account);
				 double total_salary=1000;
				 if(accountRepository.getTotalBalance(customer)!=0) {
					 total_salary+=accountRepository.getTotalBalance(customer);
				 }
				 customer.setTotalBalance(total_salary);
				 Customer save = customerRepository.save(customer);
				 return convertCustomerToCustomerResponseDto(save);
				 
			 }
		 }
		return null;
		
		 
	
	
	}


	private Account convertAcountResponseDtoToAccount(AccountRequestDto accountRequestDto) {
		Account account=new Account();
		account.setAccountNumber(accountRequestDto.getAccountNumber());
		account.setBalance(accountRequestDto.getBalance());
		account.setBank(convertBankDtotoBank(accountRequestDto.getBankrequestDto()));
		account.setCustomer(convertcustomerDtoToCustomer(accountRequestDto.getCustomerRequestDto()));
		return account;
		
	}


	


	private Customer convertcustomerDtoToCustomer(CustomerRequestDto customerRequestDto) {
	
		Customer customer = new Customer();
		customer.setCustomer_id(customerRequestDto.getCustomer_id());
		customer.setFirstName(customerRequestDto.getFirstName());
		customer.setLastName(customerRequestDto.getLastName());
		customer.setTotalBalance(customerRequestDto.getTotalBalance());
		return customer;
	}


	private Bank convertBankDtotoBank(BankRequestDto bank) {
		Bank bank1 = new Bank();
		bank1.setBank_id(bank.getBank_id());
		bank1.setAbbreviation(bank.getAbbreviation());
		bank1.setFullName(bank.getFullName());
		return bank1;
	}



	@Override
	public TransactionResponseDto doTransaction(long senderAccountNumber, long receiverAccountNumber,
			double amount) {
		Optional<User> user = userRepository.findByEmail(getEmailFromSecurityContext());
		List<Account> accounts = user.get().getCustomer().getAccounts();
		for (Account account : accounts) {
			if (account.getAccountNumber() == senderAccountNumber) {
				Account senderAccount = accountRepository.findById(senderAccountNumber).orElse(null);
				Account receiverAccount = accountRepository.findById(receiverAccountNumber).orElse(null);
				if (senderAccount == null || receiverAccount == null) {
					throw new NoRecordFoundException("Please check the sender account number " + senderAccountNumber
							+ " and receiver account number " + receiverAccountNumber);
				}
				if (senderAccount.equals(receiverAccount)) {
					throw new NoRecordFoundException("self transfer to the same account number not possible");
				}
				if (senderAccount.getBalance() < amount) {
					throw new NoRecordFoundException("Insufficient Funds please check the balance again");
				}
				senderAccount.setBalance(senderAccount.getBalance() - amount);
				receiverAccount.setBalance(receiverAccount.getBalance() + amount);
				accountRepository.save(senderAccount);
				accountRepository.save(receiverAccount);
				Customer senderCustomer = senderAccount.getCustomer();
				Customer receiverCustomer = receiverAccount.getCustomer();
				senderCustomer.setTotalBalance(senderCustomer.getTotalBalance() - amount);
				receiverCustomer.setTotalBalance(receiverCustomer.getTotalBalance() + amount);

				customerRepository.save(senderCustomer);
				customerRepository.save(receiverCustomer);
				Transaction transaction = new Transaction();
				transaction.setAmount(amount);
				transaction.setSenderAccount(senderAccount);
				transaction.setReceiverAccount(receiverAccount);
				transaction.setTransactionType(TransactionType.Transfer);
				return  convertTransactiontoTransactionDto(transactionRepository.save(transaction));
			}
		}
		throw new NoRecordFoundException("Your account number is wrong");

	}


	private TransactionResponseDto convertTransactiontoTransactionDto(Transaction save) {
		
		TransactionResponseDto transactionResponseDto=new TransactionResponseDto();
		transactionResponseDto.setAmount(save.getAmount());
		transactionResponseDto.setId(save.getId());
		transactionResponseDto.setSenderAccount(convertAccountTransactionToAccountResponseDto(save.getSenderAccount()));
		transactionResponseDto.setReceiverAccount(convertAccountTransactionToAccountResponseDto(save.getReceiverAccount()));
		transactionResponseDto.setTransactionDate(save.getTransactionDate());
		transactionResponseDto.setTransactionType(save.getTransactionType());
		
		return transactionResponseDto;
		
	}


	


	private List<TransactionResponseDto> convertTransactiontoTransactionDto(List<Transaction> all) {
		
		List<TransactionResponseDto> transactionResponseDto=new ArrayList<>();
		for(Transaction t:all) {
			transactionResponseDto.add(convertTransactiontoTransactionDto(t));
			
		}
		return transactionResponseDto;
	}


	@Override
	public PagedResponse<TransactionResponseDto> viewAllTransaction(LocalDateTime fromDate, LocalDateTime toDate,
			int page, int size, String sortBy, String direction) {
		Sort sort = Sort.by(sortBy);
		if (direction.equalsIgnoreCase("desc")) {
			sort = sort.descending();
		} else {
			sort = sort.ascending();
		}
//		fromDate = fromDate.truncatedTo(ChronoUnit.SECONDS);
//		toDate = toDate.truncatedTo(ChronoUnit.SECONDS);
		PageRequest pageRequest = PageRequest.of(page, size, sort);
		System.out.println("Page request: " + pageRequest);
		Page<Transaction> pagedResponse = transactionRepository.findAllByTransactionDateBetween(fromDate, toDate,
				pageRequest);
		System.out.println(
				"Fetched transactions: " + convertTransactiontoTransactionDto(pagedResponse.getContent()));
		PagedResponse<TransactionResponseDto> response = new PagedResponse<>(
				convertTransactiontoTransactionDto(pagedResponse.getContent()), pagedResponse.getNumber(),
				pagedResponse.getSize(), pagedResponse.getTotalElements(), pagedResponse.getTotalPages(),
				pagedResponse.isLast());
		return response;
	}


	


	private List<TransactionResponseDto> covertPassbooktopassbookDto(List<Transaction> viewPassbook,long accountNo) {
		List<TransactionResponseDto> transactionResponseDtos=new ArrayList<>();
		for(Transaction t :viewPassbook) {
			transactionResponseDtos.add(covertPassbooktopassbookDto(t,accountNo));
		}
		return transactionResponseDtos;
	}


	private TransactionResponseDto covertPassbooktopassbookDto(Transaction t,long accountNo) {
		 TransactionResponseDto transactionDto=new TransactionResponseDto();
		 
		 if((t.getSenderAccount().getAccountNumber())==accountNo) {
			 transactionDto.setTransactionType(TransactionType.Debit);
			 
		 }
		 else {
			 transactionDto.setTransactionType(TransactionType.Credit);
		 }
		 
		 transactionDto.setAmount(t.getAmount());
		 transactionDto.setId(t.getId());
		 transactionDto.setReceiverAccount(convertAccounttoAccountResponseDto(t.getReceiverAccount()));
		 transactionDto.setSenderAccount(convertAccounttoAccountResponseDto(t.getSenderAccount()));
		 transactionDto.setTransactionDate(t.getTransactionDate());
		return transactionDto;
	}


	

	@Override
	public UserResponseDto createCustomer(CustomerRequestDto customerRequestDto, long userID) {
		User user = userRepository.findById(userID).orElse(null);
		if (user == null) {
			throw new NoRecordFoundException("User not found with the following id " + userID);
		}
		if (user.getCustomer() != null) {
			throw new NoRecordFoundException("Customer already assigned cannot create another customer to the user");
		}
		Customer customer = convertCustomerRequestToCustomer(customerRequestDto);
		user.setCustomer(customer);
		String subject="Welcome to Spring Bank Application! Your Customer ID Has Been Successfully Created";
		String emailBody = "Dear "+customerRequestDto.getFirstName()+" "+customerRequestDto.getLastName()+",\n\n"
			    + "We are delighted to welcome you to the Spring Bank Application family!\n\n"
			    + "Your journey with us has just begun, and we're excited to be a part of your financial growth and success. We’re pleased to inform you that your Customer ID has been successfully created, and our team is now processing the final steps to set up your account. You can expect your account to be fully activated within the next few days.\n\n"
			    + "In the meantime, we encourage you to explore the various services and features that Spring Bank Application has to offer. From easy online banking to personalized customer support, we are here to make your banking experience as seamless and rewarding as possible.\n\n"
			    + "If you have any questions or need assistance, please don’t hesitate to reach out to our customer support team. We’re here to help every step of the way.\n\n"
			    + "Once again, welcome aboard! We look forward to serving you and supporting your financial goals.\n\n"
			    + "Warm regards,\n"
			    + "Customer Relations Team\n"
			    + "Spring Bank Application";

		sendEmail(user.getEmail(),subject,emailBody);
		return convertUserToUserDto(userRepository.save(user));
	}

	private void sendEmail(String toMail, String subject, String emailBody) {
		SimpleMailMessage mailMessage=new SimpleMailMessage();
		mailMessage.setFrom(fromMail);
		mailMessage.setTo(toMail);
		mailMessage.setText(emailBody);
		mailMessage.setSubject(subject);
		javaMailSender.send(mailMessage);
	}


	private UserResponseDto convertUserToUserDto(User save) {
		UserResponseDto responseDto=new UserResponseDto();
		responseDto.setId(save.getId());
		responseDto.setRoles(save.getRoles());
		responseDto.setCustomerResponseDto(convertCustomerToCustomerResponseDto(save.getCustomer()));
		responseDto.setEmail(save.getEmail());
		responseDto.setPassword(save.getPassword());
		return responseDto;
	}

	private CustomerResponseDto convertCustomerToCustomerResponseDto(Customer save) {
		CustomerResponseDto customerResponseDto = new CustomerResponseDto();
		customerResponseDto.setCustomer_id(save.getCustomer_id());
		customerResponseDto.setFirstName(save.getFirstName());
		customerResponseDto.setLastName(save.getLastName());
		customerResponseDto.setTotalBalance(save.getTotalBalance());
		return customerResponseDto;
	}

	private Customer convertCustomerRequestToCustomer(CustomerRequestDto customerRequestDto) {
		Customer customer = new Customer();
		customer.setFirstName(customerRequestDto.getFirstName());
		customer.setLastName(customerRequestDto.getLastName());
		customer.setTotalBalance(customerRequestDto.getTotalBalance());	
		return customer;
	}


	@Override
	public String updateProfile(ProfileRequestDto profileRequestDto) {
		User user = userRepository.findByEmail(getEmailFromSecurityContext()).orElse(null);
		if(user.getCustomer()==null) {
			throw new NoRecordFoundException("Cannot update the customer details still you havn't have customer id");
		}
		Customer customer = user.getCustomer();
		if(profileRequestDto.getEmail()!=null && !profileRequestDto.getEmail().isEmpty() && profileRequestDto.getEmail().length()!=0) {
			user.setEmail(profileRequestDto.getEmail());  
		}
		if(profileRequestDto.getFirstName()!=null && !profileRequestDto.getFirstName().isEmpty() && profileRequestDto.getFirstName().length()!=0) {
			customer.setFirstName(profileRequestDto.getFirstName());
		}
		if(profileRequestDto.getLastName()!=null && !profileRequestDto.getLastName().isEmpty() && profileRequestDto.getLastName().length()!=0) {
			customer.setLastName(profileRequestDto.getLastName());
		}
		if(profileRequestDto.getPassword()!=null && !profileRequestDto.getPassword().isEmpty() && profileRequestDto.getPassword().length()!=0) {
			user.setPassword(passwordEncoder.encode(profileRequestDto.getPassword()));
		}

		userRepository.save(user);
		
		return "user succesfully updated";
	}

	private String getEmailFromSecurityContext() {
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		if (authentication != null && authentication.getPrincipal() instanceof UserDetails) {
			UserDetails userDetails = (UserDetails) authentication.getPrincipal();
			return userDetails.getUsername();
		}
		return null;
	}


	@Override
	public PagedResponse<TransactionResponseDto> viewPassbook(long accountNumber, LocalDateTime from, LocalDateTime to, int page,
			int size, String sortBy, String direction) {
		Sort sort = Sort.by(sortBy);
		if (direction.equalsIgnoreCase(Sort.Direction.DESC.name())) {
			sort.descending();
		} else {
			sort.ascending();
		}

		String email = getEmailFromSecurityContext();
		Optional<User> user = userRepository.findByEmail(email);
		if(user.get().getCustomer()==null) {
			throw new NoRecordFoundException("still you havn't have customer id");
		}
		List<Account> accounts = user.get().getCustomer().getAccounts();
		for (Account acc : accounts) {
			if (acc.getAccountNumber() == accountNumber) {
				Account account = accountRepository.findById(accountNumber).orElse(null);
		PageRequest pageRequest = PageRequest.of(page, size, sort);
				Page<Transaction> pagedResponse = transactionRepository.viewPassbook(account,from,to,pageRequest);

				return new PagedResponse<TransactionResponseDto>(
						convertTransactiontoTransactionDto(pagedResponse.getContent(), accountNumber),
						pagedResponse.getNumber(), pagedResponse.getSize(), pagedResponse.getTotalElements(),
						pagedResponse.getTotalPages(), pagedResponse.isLast());
			}
		}
		throw new NoRecordFoundException("Please give valid account number");
		

	}


	private List<TransactionResponseDto> convertTransactiontoTransactionDto(List<Transaction> passbook,
			long accountNumber) {
		List<TransactionResponseDto> list = new ArrayList<>();
		for (Transaction transaction : passbook) {
			TransactionResponseDto responseDto = new TransactionResponseDto();
			responseDto.setAmount(transaction.getAmount());
			if(transaction.getReceiverAccount()!=null) {
				responseDto.setReceiverAccount(convertAccountTransactionToAccountResponseDto(transaction.getReceiverAccount()));				
			}
			if(transaction.getSenderAccount()!=null) {
				responseDto.setSenderAccount(convertAccountTransactionToAccountResponseDto(transaction.getSenderAccount()));				
			}
			responseDto.setId(transaction.getId());
			responseDto.setTransactionDate(transaction.getTransactionDate());
			if (transaction.getSenderAccount()!=null && transaction.getSenderAccount().getAccountNumber() == accountNumber) {
				responseDto.setTransactionType(TransactionType.Debit);
			} else {
				responseDto.setTransactionType(TransactionType.Credit);
			}
			list.add(responseDto);
		}
		return list;
	}
	
	
	@Override
	public AccountResponseDto depositAmount(long accountNumber, double amount) {
		User user = userRepository.findByEmail(getEmailFromSecurityContext()).orElse(null);
		List<Account> accounts = user.getCustomer().getAccounts();
		Customer customer = user.getCustomer();
		if(customer==null) {
			throw new NoRecordFoundException("Customer not associated with the user");
		}
		for(Account account:accounts) {
			if(account.getAccountNumber()==accountNumber) {
				account.setBalance(account.getBalance()+amount);
				accountRepository.save(account);
				Double totalBalance=accountRepository.getTotalBalance(customer);
				customer.setTotalBalance(totalBalance);
				customerRepository.save(customer);
				Transaction transaction=new Transaction();
				transaction.setAmount(amount);
				transaction.setReceiverAccount(account);
				transaction.setTransactionType(TransactionType.Transfer);
				transactionRepository.save(transaction);
				return convertAccounttoAccountResponseDto(account);
			}
		}
		throw new NoRecordFoundException("Please check account number properly");
		
	}

	@Override
	public List<AccountResponseDto> getAccounts() {
		User user = userRepository.findByEmail(getEmailFromSecurityContext()).orElse(null);
		return convertAccounttoAccountResponseDto(user.getCustomer().getAccounts());
	}


	


	
	
	private AccountResponseDto convertAccountTransactionToAccountResponseDto(Account account) {
		AccountResponseDto accountResponseDTO = new AccountResponseDto();
		if(account!=null) {
			accountResponseDTO.setAccountNumber(account.getAccountNumber());
		}
		return accountResponseDTO;
	}


	@Override
	public String deleteCustomer(long customerID) {
		Customer customer = customerRepository.findById(customerID).orElse(null);
		if(customer==null) {
			throw new NoRecordFoundException("Customer not found with the id "+customerID);
		}
		if(!customer.isActive()) {
			throw new NoRecordFoundException("Customer is already deleted");
		}
		customer.setActive(false);
		List<Account> accounts = customer.getAccounts();
		for(Account account:accounts) {
			account.setActive(false);
		}
		customerRepository.save(customer);
		return "Customer deleted successfully";
	}

	@Override
	public String activateCustomer(long customerID) {
		Customer customer = customerRepository.findById(customerID).orElse(null);
		if(customer==null) {
			throw new NoRecordFoundException("Customer not found with the id "+customerID);
		}
		if(customer.isActive()) {
			throw new NoRecordFoundException("Customer is already active");
		}
		customer.setActive(true);
		customerRepository.save(customer);
		return "Customer activated successfully";
	}

	@Override
	public String deleteAccount(long accountNumber) {
		Account account = accountRepository.findById(accountNumber).orElse(null);
		if(account==null) {
			throw new NoRecordFoundException("Account not found with the account number "+accountNumber);
		}
		if(!account.isActive()) {
			throw new NoRecordFoundException("Account is already deleted");
		}
		account.setActive(false);
		accountRepository.save(account);
		return "Account deleted successfully";
	}

	@Override
	public String activateAccount(long accountNumber) {
		Account account = accountRepository.findById(accountNumber).orElse(null);
		if(account==null) {
			throw new NoRecordFoundException("Account not found with the account number "+accountNumber);
		}
		if(account.isActive()) {
			throw new NoRecordFoundException("Account is already active");
		}
		account.setActive(true);
		accountRepository.save(account);
		return "Account activated successfully";
	}

	@Override
	public AccountResponseDto viewBalance(long accountNumber) {
		String email = getEmailFromSecurityContext();
		Optional<User> user = userRepository.findByEmail(email);
		List<Account> accounts = user.get().getCustomer().getAccounts();
		for(Account account:accounts) {
			if(account.getAccountNumber()==accountNumber && isAccountActive(account)) {
				return convertAccounttoAccountResponseDto(account);
			}
		}
		throw new NoRecordFoundException("Please check the account number");
	}

	private boolean isAccountActive(Account account) {
		if(!account.isActive()) {
			return false;
		}
		return true;
	}
	

	


	
}
